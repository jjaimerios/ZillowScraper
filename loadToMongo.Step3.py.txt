#!/usr/bin/python3

# This script will read the semi-clean data generated by parseZillowHtml.pl
# It will prep each record to be able to be converted into a dictionary
# It will then write the dictionary into a dictioary with all records
# Last it will load the dictionary of dictionaries into mongodb

# Import regex libraries
import re
import regex

# To pause between iterations
import time

# Import nosql db component
import pymongo

# Import os to read directories
import os

# Import other supporting libraries
import pandas
import matplotlib.pyplot as plt
from sqlalchemy import create_engine

# Import application properties library and set variables
import configparser
config = configparser.RawConfigParser()
config.read('../etc/config.props') # Property file with app variables

# Function to read property (house) hits and format into dictionaries
def readHouseHits(houseHitsFile):

    # Init dictionary to hold house records (dictionary of dictionaries)
    propDict = {}

    # Init record number variable
    recNum = 0

    # Read html file house result lines
    with open(houseHitsFile, "r") as file:
        lines = file.readlines()
        for line in lines:
            # Skip line if does not contain "streetAddress" field
            if 'streetAddress' not in line:
                continue

            # Find everything between first set of squiggly brackets
            linex1 = line[line.find("{")+1:line.rfind("}")]

            # Most of the below is to get the records into a format dictionaries like

            # Remove commas and colons from "nested lists" withing string
            linex2 = regex.sub(r"\{(?:[^{}]|(?R))*}", lambda x: x.group(0).replace(":", "="), linex1)
            linex3 = regex.sub(r"\{(?:[^{}]|(?R))*}", lambda x: x.group(0).replace(",", "="), linex2)

            # Remove commas between brackets
            linex4 = re.sub(r'"[^"]*"', lambda m: m.group(0).replace(',', ''), linex3)

            # Remove doublequotes
            linex5 = linex4.replace('\"', '')

            # Replace colons in timestamps - don't need them
            linex6 = re.sub("[0-9]:[0-9]", "", linex5)
            # Replace colons in urls
            linex6a = re.sub("https:", "https", linex6)
            linex6b = re.sub("http:", "http", linex6a)

            # Now we have a clean string we can generate key-value pairs from

            # Convert string to a key-value dictionary object
            dictres = dict(item.split(":") for item in linex6b.split(","))

            #propDict[recNum] = {dictres}
            propDict[recNum] = dictres
            recNum+=1

    return propDict

# Function to load property records into mongodb
def loadToMongo(propertyList):
    #print("made it")

    # Loop through ID of each record
    #for p_id, p_info in propertyList.items():
    #    print("\nRecord ID:", p_id)
    
    # Loop through data for each record
    #for key in p_info:
    #    print(key + ':', p_info[key])

    #print(propertyList[20])
    #print(propertyList[20]['zpid'])
    #print(propertyList[20]['streetAddress'])

    myclient = pymongo.MongoClient("mongodb://localhost:27017/")

    # Init / name database
    mydb = myclient["RegisMSDS692"]

    # Init / name collection
    mycol = mydb["ZillowDB"]

    # insert multiple documents
    #propTbl = mycol.insert_many([propertyList])
    # Mongo did not like this due to integer keys - wants a string

    #for i in propertyList:
    #    print (i)
    for key, value in propertyList.items():
        print(value)
        mycol.insert_one(value)

    #id returned by insert_one
    #print("Document inserted with id: ", tbl1x.inserted_id)

    #print('ids of inserted documents\n---------------------')
    #for id in propTbl.inserted_ids:
    #    print(id)

# Main function
def main():
    #readHouseHits('../Ingest/output.SanJoseCA_rb_1.html')
    #readHouseHits('../Ingest/output.coloradosprings_rb_1.html')

    try:
        # Get the list of all files and directories in Ingest dir
        path = "../Ingest/"
        dir_list = os.listdir(path)

        # Parse through each file and load to mongoDB
        for file in dir_list:
            #print(file)

            # Read property hits - format into dictionary of dictionaries
            houseList = readHouseHits('../Ingest/' + file)
            #houseList = readHouseHits('../Ingest/output.coloradosprings_rb_1.html')

            #print("Resultant dictionary", str(houseList))

            # We can test success by writing out individual fields from a given record
            #print(houseList[20])
            #print(houseList[20]['zpid'])
            #print(houseList[20]['listing_sub_type'])
            #print(houseList[20]['streetAddress'])

            # Load property search results into mongodb
            loadToMongo(houseList)

    except Exception as Argument:
        # creating/opening a file
        f = open("../log/error.log", "a")
 
        # writing in the file
        f.write(str(Argument) + "\n")
      
        # closing the file
        f.close()

# Call main
if __name__ == "__main__":
    main()
